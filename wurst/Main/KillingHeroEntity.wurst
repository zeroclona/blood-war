package KillingHeroEntity
import HeroEntity
import GameTimer
import HashMap
import ClosureEvents
import TimerUtils
import LinkedList
import PlayerData
import DamageEvent
import RecentDamage
import Statistics
import ErrorHandling

function calcHeroKillReward(HeroEntity victim) returns int

  real reward = 100 + (victim.actor.getLevel() * 25) - (RecentDamage.attackersLevel(victim) * 15) + (currentTime/10) - (0/* deathcount*10 */)
  print("victim level "+victim.actor.getLevel().toString()+" attackers level "+RecentDamage.attackersLevel(victim).toString())
  switch RecentDamage.attackers(victim).size()
    case 1
      print("один")
      reward *= (1+(.25))
    case 2
      print("вдвоем")
    case 3
      print("втроем")
      reward *= (1+(-.15))
    case 4
      print("всей семьей")
      reward *= (1+(-.30))
    default
      reward *= 1
  //print("post calculation reward "+reward.toString())
  return (reward + (reward >= 0?.5:-.5)).toInt()


public function onHeroDeath(HeroEntity he, unit killer)
  let attackers = RecentDamage.attackers(he)
  let reward = calcHeroKillReward(he)
  for a in attackers
    print("Before: "+a.p.getGold().toString())
    a.addGold(reward)
    print("After: "+a.p.getGold().toString())
  he.ownerData.subGold(reward)

  let outstr = attackers.size() > 1 ? killer.getPlayerData().name()+" убил "+he.ownerData.name()+". Каждый нападающий получил "+(reward).toString()+" золота" : killer.getPlayerData().name()+" убил "+he.ownerData.name()+" и получил за это "+(reward).toString()+" золота"
  printTimed(outstr, 10.)

  he.revive(15.)

  PersonalStats.addKill(killer.getPlayerData())
  PersonalStats.addDeath(he.ownerData)

  RecentDamage.map.get(he).remainTimeList.forEach() (PlayerData pd, real value) ->
    print("Attacker "+pd.p.getName()+" i ego time "+value.toString())

public function registerHeroDeaths()
  EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
    //var tobreak = false
    if IsUnitType(GetDyingUnit(), UNIT_TYPE_HERO)
      let hero = GetDyingUnit().getHeroEntity()
      if hero != null
        hero.onDeathActions.run(hero, GetKillingUnit())
      /*for pd in PlayerData.list
        //run actions(onHeroDeath()) if that's mainhero and break this cycle
        if GetDyingUnit() == pd.mainhero.actor
          onHeroDeath(pd.mainhero, GetKillingUnit())
          tobreak = true
          break*/
      //if not, find hero in hero list of all players
      /*if not tobreak
        tobreak = false
        for pd in PlayerData.list
          for hero in pd.herolist()
            if hero.actor == GetDyingUnit()
              if hero.legitimus
                //////////if specific then onSpecificDeath() callback??????????
                onHeroDeath(hero, GetKillingUnit())
                tobreak = true
                break
          if tobreak
            error(GetKillingUnit().getName()+" is not registered")
            break*/
